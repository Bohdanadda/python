#Zadania 1
#def wyeszwitl_bez_powtorzen(lista):
#    for wartosc in set(lista):
#        print(wartosc)

#lista = [2,3,4,5]
#wyeszwitl_bez_powtorzen(lista)

#Zadania 2
#wyraz = "przykladowyj takst ! 123"
#wyraz = ''.join(filter(str.isalnum, wyraz))
#wyraz = wyraz[::-1]
#co_czwarta = wyraz[3::4]
#print(co_czwarta)

#Zadania 3 a)
#def fib(n):
#    if n <= 1:
#        return n
#    else:
#        return (fib(n-1)+fib(n-2))

#n=10
#wynik = fib(n)
#print("Liczba finonaczego dla n=", n,"to", wynik)

#Zadania 3 b)
#def fib_petl(n):
#    if n<=1:
#        return n

#    fib1 =0
#    fib2=1
#    for i in range(2,n+1):
#        fib = fib1+fib2
#        fib1 = fib2
#        fib2 = fib

#    return fib2

#n = 10
#wynik = fib_petl(n)
#print("liczba dla n = ",n,"to",wynik)

#Zadania 4
#def liczba(*args, n=1):
#    iloczyn = 1
#    for liczba in args:
#        iloczyn *= liczba ** n
#    return iloczyn

#wynik = liczba(1,2,3,4,5,n=2)
#print(wynik)

#Zadania 5
#lista_slow = ['apple','banana','pomegranate','plum','orange','melon','cherry','watermelon']
#dlugosci_slow = [len(slowo) for slowo in lista_slow if 'o' in slowo or 'u' in slowo]
#print(dlugosci_slow)

#Zadania 6
#def symboly_newtona(n,k):
#    if k == 0 or k == n:
#        return 1
#    elif k >n:
#        return 0
#    else:
#        return symboly_newtona(n-1,k-1)+symboly_newtona(n-1,k)

#n = 5
#k = 2
#wynik = symboly_newtona(n,k)
#print(wynik)

#Zadania 7
class Polimial:
    def __init__(self,coefficients):
        self.coefficients = coefficients[::-1]

    def __str__(self):
        terms = []
        for i,coeff in enumerate(self.coefficients):
            if coeff != 0:
                if i == 0:
                    terms.append(str(coeff))
                elif i == 1:
                    terms.append(f"{coeff}x")
                else:
                    terms.append(f"{coeff}x^{i}")
        if not terms:
            terms.append("0")
        return "+".join(terms[::-1])

    def __add__(self, other):
        result = [0]*max(len(self.coefficients),len(other.coefficient))
        for i in range (len(result)):
            if i < len(self.coefficients):
                result[i] += self.coefficients[i]
            if i < len(other.coefficient):
                result[i] +=other.coefficient[i]
        return Polimial(result)
    def __sub__(self, other):
        result = [0] * max(len(self.coefficients), len(other.coefficient))
        for i in range(len(result)):
            if i < len(self.coefficients):
                result[i] += self.coefficients[i]
            if i < len(other.coefficient):
                result[i] -= other.coefficient[i]
        return Polimial(result)

    def degree(self):
        return len(self.coefficients) - 1

    def __floordiv__(self, other):
        if not isinstance(other, int):
            raise TypeError("Dzielnik")
        result = [0] * len(self.coefficients)
        for i in range(len(result)):
            result[i] = self.coefficients[i]
        return Polimial(result)

    def __getitem__(self, index):
        return self.coefficients[index]

p1 = Polimial([2,0,-1,3])
p2 = Polimial([1,1,1])
p3 = p1 + p2